// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minimart_Api.TempModels;

#nullable disable

namespace Minimart_Api.Migrations
{
    [DbContext(typeof(MinimartDBContext))]
    partial class MinimartDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Minimart_Api.TempModels.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"), 1L, 1);

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("isDefault")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("UserID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cartItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cartID");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.County", b =>
                {
                    b.Property<int>("CountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountyId"), 1L, 1);

                    b.Property<int>("CountyCode")
                        .HasColumnType("int");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CountyId");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.DeliveryStation", b =>
                {
                    b.Property<int>("DeliveryStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryStationId"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryStationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryStationId");

                    b.HasIndex("TownId");

                    b.ToTable("DeliveryStations");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeliveryScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentConfirmation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentDetailsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalDeliveryFees")
                        .HasColumnType("float");

                    b.Property<double>("TotalOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalPaymentAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalTax")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UserID");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.OrderProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.OrderStatusTracking", b =>
                {
                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Status"), 1L, 1);

                    b.Property<string>("OrderTrackingTrackingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Status");

                    b.HasIndex("OrderTrackingTrackingID");

                    b.ToTable("orderStatus");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.OrderTracking", b =>
                {
                    b.Property<string>("TrackingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrackingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TrackingID");

                    b.HasIndex("CurrentStatus");

                    b.HasIndex("OrderID");

                    b.HasIndex("PreviousStatus");

                    b.ToTable("orderTracking");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.PaymentDetails", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodID"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodID");

                    b.HasIndex("PaymentID");

                    b.ToTable("paymentDetails");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Payments", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.ResponseStatus", b =>
                {
                    b.Property<int>("ResponseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseStatusId"), 1L, 1);

                    b.Property<bool>("ResponseCode")
                        .HasColumnType("bit");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseStatusId");

                    b.ToTable("ResponseStatus");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Status", b =>
                {
                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<string>("CartName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cartName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("CartId")
                        .HasName("PK__t_Carts__415B03D8762A75C5");

                    b.HasIndex("UserId");

                    b.ToTable("t_Carts", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("CategoryId")
                        .HasName("PK__t_Catego__23CAF1F8AFEA0E02");

                    b.ToTable("t_Categories", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TDashboarditem", b =>
                {
                    b.Property<int>("DashBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DashBoardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DashBoardId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DashBoardId")
                        .HasName("PK_t_dashboarditems_DashBoardID");

                    b.ToTable("t_dashboarditems", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TFeature", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("AdaptiveSync")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("color");

                    b.Property<string>("ConnectiveTechnology")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("connectiveTechnology");

                    b.Property<string>("DisplayResolution")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageBrightness")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemWeight")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MainCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MountingType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("productName");

                    b.Property<int?>("RefreshRate")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResponseTime")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ScreenSurface")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecialFeatures")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WarrantyType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductId")
                        .HasName("PK_t_features_productID");

                    b.ToTable("t_features", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.THelpsetting", b =>
                {
                    b.Property<int>("Rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ROWID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Rowid"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Rowid")
                        .HasName("PK_t_helpsettings_ROWID");

                    b.ToTable("t_helpsettings", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ImageId")
                        .HasName("PK_t_image_ImageID");

                    b.ToTable("t_image", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("orderDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("totalAmount");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("OrderId")
                        .HasName("PK__t_Orders__0809337DBD766844");

                    b.HasIndex("UserId");

                    b.ToTable("t_Orders", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TOrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderItemId")
                        .HasName("PK__t_OrderI__3724BD72056978F8");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("t_OrderItems", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Town", b =>
                {
                    b.Property<int>("TownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TownId"), 1L, 1);

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TownId");

                    b.HasIndex("CountyId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProductID");

                    b.Property<string>("Box")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("KeyFeatures")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,0)")
                        .HasColumnName("price");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("productName");

                    b.Property<string>("ProductType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RowID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"), 1L, 1);

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stockQuantity");

                    b.Property<string>("SubCategoryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SubCategoryID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("ProductId")
                        .HasName("PK__t_Produc__B40CC6ED6CED5B85");

                    b.HasIndex("CategoryId");

                    b.ToTable("t_Products", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TRefreshToken", b =>
                {
                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("UserID");

                    b.ToTable("t_RefreshToken", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productID");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<byte[]>("ReviewDate")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("review_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("ReviewId")
                        .HasName("PK__t_Review__2ECD6E2451F94E4F");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("t_Reviews", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TSubcategoryid", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("(N'C')");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubCategoryId")
                        .HasName("PK_t_subcategoryid_CategoryID");

                    b.HasIndex("CategoryId");

                    b.ToTable("t_subcategoryid", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("FailedAttempts")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.Property<bool?>("IsLoggedIn")
                        .HasColumnType("bit")
                        .HasColumnName("isLoggedIn");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("PasswordChangesOn")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RoleID");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserId")
                        .HasName("PK__t_Users__1788CCAC83A2EDF9");

                    b.ToTable("t_Users", (string)null);
                });

            modelBuilder.Entity("Minimart_Api.TempModels.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInfoId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("UserInfoId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.UserRegStatus", b =>
                {
                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.ToTable("UsrRegStatuses");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Address", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.TUser", "TUser")
                        .WithMany("Addresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TUser");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.CartItem", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.TCart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__CartItems__cartI__2A164134");

                    b.HasOne("Minimart_Api.TempModels.TProduct", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__CartItems__prod");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.DeliveryStation", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.Town", "Town")
                        .WithMany("DeliveryStations")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Order", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.PaymentDetails", "PaymentDetails")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minimart_Api.TempModels.TUser", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.OrderProducts", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.Order", "order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minimart_Api.TempModels.TProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.OrderStatusTracking", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.OrderTracking", null)
                        .WithMany("orderStatusTrackings")
                        .HasForeignKey("OrderTrackingTrackingID");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.OrderTracking", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.OrderStatusTracking", null)
                        .WithMany()
                        .HasForeignKey("CurrentStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Minimart_Api.TempModels.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minimart_Api.TempModels.OrderStatusTracking", null)
                        .WithMany()
                        .HasForeignKey("PreviousStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Minimart_Api.TempModels.PaymentDetails", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.Payments", "Payments")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TCart", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.TUser", "User")
                        .WithMany("TCarts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__t_Carts__userID__2739D489");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TOrder", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.TUser", "User")
                        .WithMany("TOrders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__t_Orders__userID__1BC821DD");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TOrderItem", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.TOrder", "Order")
                        .WithMany("TOrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__t_OrderIt__order__1EA48E88");

                    b.HasOne("Minimart_Api.TempModels.TProduct", "Product")
                        .WithMany("TOrderItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__t_OrderItems__prod");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Town", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.County", "County")
                        .WithMany("Towns")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TProduct", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.TCategory", "CategoryNavigation")
                        .WithMany("TProducts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__t_Product__categ__18EBB532");

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TReview", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.TProduct", "Product")
                        .WithMany("TReviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__t_Reviews__prod");

                    b.HasOne("Minimart_Api.TempModels.TUser", "User")
                        .WithMany("TReviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__t_Reviews__userI__245D67DE");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TSubcategoryid", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.TCategory", "Category")
                        .WithMany("TSubcategoryids")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_t_subcategoryid_CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.UserInfo", b =>
                {
                    b.HasOne("Minimart_Api.TempModels.ResponseStatus", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.County", b =>
                {
                    b.Navigation("Towns");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.OrderTracking", b =>
                {
                    b.Navigation("orderStatusTrackings");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.PaymentDetails", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Payments", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.ResponseStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TCategory", b =>
                {
                    b.Navigation("TProducts");

                    b.Navigation("TSubcategoryids");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TOrder", b =>
                {
                    b.Navigation("TOrderItems");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.Town", b =>
                {
                    b.Navigation("DeliveryStations");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TProduct", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("TOrderItems");

                    b.Navigation("TReviews");
                });

            modelBuilder.Entity("Minimart_Api.TempModels.TUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("TCarts");

                    b.Navigation("TOrders");

                    b.Navigation("TReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
